# importation of the packages and libraries needed

from random import uniform
from plotly.subplots import make_subplots
import plotly.graph_objects as go


# user input for tailored results
def get_answer(prompt):
    while True:
        print(prompt)
        value = input("Input a number please. ")
        try:
            return float(value)
        except ValueError:
            print(f"{value} is not a valid number.")


base_ph = get_answer("What is your starting pH? ")
base_dkh = get_answer("What is your starting dKH? ")
requested_c02level = get_answer("What is your requested maximum CO2 level? ")
max_ph = get_answer("What is your maximum level of pH? ")
time_of_simulation = get_answer(
    "How long would you like for the program to run? ")

# variable for length of time
time1 = int(time_of_simulation)

# equation for determining c02 levels
base_c02 = 12.839 * base_dkh * 10**(6.37 - base_ph)
ph = base_ph

print("The starting c02 is " + str(round(base_c02, 3)))
# sets up the list for the graph
x_length = []
c02_length = []
ph_length = []

start_c02 = 12.839 * base_dkh * 10**(6.37 - base_ph)
# for loop to calculate
for x in range(time1):
    if base_c02 <= requested_c02level:
        base_c02 += uniform(0.8, 1.2)
        # adds c02 if ppm is less than requested c02 level
    print("The new CO2 level is " + str(round(base_c02, 3)))
    if base_c02 >= 19.99:
        ph += uniform(0.2, .3)
        # adds to ph due to increase of c02
    if ph >= max_ph:
        ph += uniform(-.43, -.51)

        # reflects shut off of c02 dispenser
    if base_c02 >= requested_c02level:
        base_c02 += uniform(-0.42, -0.53)
        # reflects decrease in c02 levels due to shutoff of diffuser

    c02_length.append(base_c02)
    ph_length.append(ph)
print("The final CO2 level over 24 hours is " + str(round(base_c02, 3)))
print("The final pH level is " + str(round(ph, 3)))

# for loop to get x axis for graph
for x in range(time1):
    x_length.append(x)

x_length.append(time1)
# appends list with values from for loop
c02_length.insert(0, int(start_c02))

ph_length.insert(0, int(base_ph))

# plotting

fig = make_subplots(rows=1,
                    cols=2,
                    subplot_titles=("ph Over Time", "CO2 over Time"))

# Add traces
fig.add_trace(go.Scatter(x=x_length, y=c02_length, name="CO2"), row=1, col=1)
fig.add_trace(go.Scatter(x=x_length, y=ph_length, name="pH"), row=1, col=2)

# Update xaxis properties
fig.update_xaxes(title_text="Time in Hours", row=1, col=1)
fig.update_xaxes(title_text="Time in Hours", row=1, col=2)

# Update yaxis properties
fig.update_yaxes(title_text="pH over Time", row=1, col=1)
fig.update_yaxes(title_text="C02 over Time (PPM)", row=1, col=2)

# Update title and height
fig.update_layout(title_text="pH and CO2 Over Time", height=700)

fig.show()
